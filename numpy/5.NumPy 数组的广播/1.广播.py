# NumPy 数组的广播是一个强大的功能，它允许不同形状的数组在进行算术运算时自动对齐。广播机制可以让你在不需要显式地重复数组的情况下，进行元素级的运算，从而简化代码并提高效率。
#
# 广播的基本规则
# TODO 广播遵循以下基本规则：
#
# 1.如果数组的维度不同，较小的数组会在左侧补充 1，直到两个数组的维度相同。
# 2.如果两个数组在某个维度上的大小相同，或者其中一个数组在该维度的大小为 1，则可以进行广播。
# 3.如果两个数组的形状在所有维度上都不符合上述条件，则无法进行广播，NumPy 将抛出一个错误。

# 广播的应用场景
# 广播在许多场景中非常有用，例如：
#
# 数据处理: 当你需要对数组的每个元素进行相同的操作时，可以使用广播来避免使用循环。
# 数学运算: 在执行复杂的数学运算时，广播可以简化代码并提高性能。
# 图像处理: 在处理图像数据时，广播常用于调整图像的亮度、对比度等。

import numpy as np

# 创建一个数组
array = np.array([1, 2, 3])

# 将标量加到数组中
result = array + 5
print("标量与数组的广播结果:", result)  # 输出: [6 7 8]

# 创建两个不同形状的数组
array1 = np.array([[1, 2, 3],
                   [4, 5, 6]])

array2 = np.array([10, 20, 30])

# 进行加法运算
result = array1 + array2
print("两个数组的广播结果:\n", result)
# array2 的形状是 (3,)，而 array1 的形状是 (2, 3)。array2 被广播为 (2, 3) 的形状，与 array1 进行元素级的加法运算。
# 输出
# 两个数组的广播结果:
#  [[11 22 33]
#  [14 25 36]]


# 创建一个二维数组和一个一维数组
array1 = np.array([[1, 2, 3],
                   [4, 5, 6]])

array2 = np.array([[10], [20]])

# 进行加法运算
result = array1 + array2
print("不同维度的数组广播结果:\n", result)
# array2 的形状是 (2, 1)，它被广播为 (2, 3)，从而与 array1 进行加法运算。
# 输出
# 不同维度的数组广播结果:
#  [[11 12 13]
#  [24 25 26]]


# 创建一个 3x1 的数组和一个 1x3 的数组
array1 = np.array([[1],
                   [2],
                   [3]])

array2 = np.array([[10, 20, 30]])

# 进行加法运算
result = array1 + array2
print("两个不同形状的数组广播结果:\n", result)
# array1 的形状是 (3, 1)，array2 的形状是 (1, 3)，它们可以广播为 (3, 3)。
# 输出
# 两个不同形状的数组广播结果:
#  [[11 21 31]
#  [12 22 32]
#  [13 23 33]]


# 创建一个数组
array = np.array([[1, 2, 3],
                  [4, 5, 6]])

# 使用条件运算进行广播
result = array > 3
print("条件运算结果:\n", result)
# 输出
# 条件运算结果:
#  [[False False False]
#  [ True  True  True]]


# 创建一个数组
array = np.array([[1, 2, 3],
                  [4, 5, 6]])

# 使用 NumPy 的平方根函数
result = np.sqrt(array)
print("平方根运算结果:\n", result)
# 输出
# 平方根运算结果:
#  [[1.         1.41421356 1.73205081]
#  [2.         2.23606798 2.44948974]]


# 创建一个一维数组
array1 = np.array([1, 2, 3])

# 使用 np.newaxis 增加维度
array2 = array1[:, np.newaxis]  # 变为 3x1 的数组

# 创建一个 1x3 的数组
array3 = np.array([[10, 20, 30]])

# 进行加法运算
result = array2 + array3
print("使用 np.newaxis 的广播结果:\n", result)
# 输出
# 使用 np.newaxis 的广播结果:
#  [[11 21 31]
#  [12 22 32]
#  [13 23 33]]

